@using ClientDependency.Core.Mvc
@using Escc.ClientDependencyFramework
@using Escc.EastSussexGovUK.Skins
@using Escc.EastSussexGovUK.Umbraco.Jobs
@using Escc.EastSussexGovUK.Views
@using Escc.Web
@inherits Umbraco.Web.Mvc.UmbracoViewPage<Escc.EastSussexGovUK.Umbraco.Jobs.JobsSearchViewModel>
@{
    Model.EsccWebsiteView = ViewSelector.CurrentViewIs(Layout, ViewEngine.Mvc);
    Model.EsccWebsiteSkin = new CustomerFocusSkin(Model.EsccWebsiteView);
    Html.RequiresCss(CssFileAlias.Resolve("FormsSmall"));
    Html.RequiresCss(CssFileAlias.Resolve("FormsMedium"), MediaQueryAlias.Resolve("Medium"));
    Html.RequiresCss(CssFileAlias.Resolve("FormsLarge"), MediaQueryAlias.Resolve("Large"));
    Html.RequiresCss("~/css/jobs/jobs-small.css");
    Html.RequiresCss("~/css/jobs/jobs-medium.css", MediaQueryAlias.Resolve("Medium"));
    Html.RequiresCss("~/css/jobs/jobs-large.css", MediaQueryAlias.Resolve("Large"));
    Html.RequiresCss(Request.Url.AbsolutePath + "?alttemplate=JobsCss&media-query=small", 101);

    var headerClass = Model.HeaderBackgroundImage != null ? "with-image" : String.Empty;
}
@section Breadcrumb {}
<div class="jobs-header text-content content @headerClass">
    <div class="context">
        @if (Model.JobsLogo != null)
            {
                if (Model.JobsHomePage != null)
                {
                <a href="@Model.JobsHomePage.Url"><img src="@Model.JobsLogo.ImageUrl" alt="@Model.Metadata.Title" width="@Model.JobsLogo.Width" class="jobs-logo" /></a>
            }
            else
            {
                <img src="@Model.JobsLogo.ImageUrl" alt="@Model.Metadata.Title" width="@Model.JobsLogo.Width" class="jobs-logo" />
            }
        }
        @if (Model.LoginPage != null)
        {
            <p class="login">
                <a href="@Model.LoginPage.Url">@Model.LoginPage.Text &gt;</a>
            </p>
        }
    </div>
</div>

<div class="jobs-content full-page">
    <div class="content text-content">
        <h1>@Model.Metadata.Title</h1>

        @using (Html.BeginUmbracoForm<JobsSearchSurfaceController>("Search", null, new Dictionary<string, object> { { "class", "form short-form" } }))
        {
            @Html.AntiForgeryToken();

            <div>
                <label for="keywords">Keywords</label>
                <input type="search" name="keywords" id="keywords" />
            </div>

                <div>
                    <label for="locations">Location</label>
                    <select multiple="multiple" name="locations" id="locations">
                        @foreach (var location in Model.Locations)
                        {
                            <option value="@location.Id">@location.Text (@location.Count)</option>
                        }
                    </select>
                </div>

                <div>
                    <label for="jobTypes">Category</label>
                    <select multiple="multiple" name="jobTypes" id="jobTypes">
                        @foreach (var jobType in Model.JobTypes)
                        {
                            <option value="@jobType.Id">@jobType.Text (@jobType.Count)</option>
                        }
                    </select>
                </div>

                <fieldset class="checkboxes">
                    <legend>Salary</legend>
                    @foreach (var salaryRange in Model.SalaryRanges)
                    {
                        <label><input type="checkbox" value="@salaryRange.Id" name="salaryRanges" /> @salaryRange.Text (@salaryRange.Count)</label>
                    }
                </fieldset>

                <fieldset class="checkboxes">
                    <legend>Work pattern</legend>
                    @foreach (var workPattern in Model.WorkPatterns)
                    {
                        <label><input type="checkbox" value="@workPattern.Id" name="workPatterns" /> @workPattern.Text (@workPattern.Count)</label>
                    }
                </fieldset>

                <input type="submit" />
        }
    </div>
</div>

