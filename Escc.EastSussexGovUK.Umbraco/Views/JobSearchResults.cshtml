@using System.Text.RegularExpressions
@using ClientDependency.Core.Mvc
@using Escc.ClientDependencyFramework
@using Escc.Dates
@using Escc.EastSussexGovUK.Skins
@using Escc.EastSussexGovUK.Umbraco.Jobs
@using Escc.EastSussexGovUK.Views
@using Escc.Web
@using X.PagedList.Mvc
@inherits Umbraco.Web.Mvc.UmbracoViewPage<Escc.EastSussexGovUK.Umbraco.Jobs.JobSearchResultsViewModel>
@{
    Model.EsccWebsiteView = ViewSelector.CurrentViewIs(Layout, ViewEngine.Mvc);
    Model.EsccWebsiteSkin = new CustomerFocusSkin(Model.EsccWebsiteView);
    Html.RequiresCss("~/css/jobs/jobs-small.css");
    Html.RequiresCss("~/css/jobs/jobs-medium.css", MediaQueryAlias.Resolve("Medium"));
    Html.RequiresCss("~/css/jobs/jobs-large.css", MediaQueryAlias.Resolve("Large"));
    Html.RequiresCss(Request.Url.AbsolutePath + "?alttemplate=JobSearchResultsCss&media-query=small", 101);
    new ContentSecurityPolicyHeaders(Response.Headers).AppendPolicy(new ContentSecurityPolicyFromConfig().Policies["TalentLink"]).UpdateHeaders();

    var headerClass = Model.HeaderBackgroundImage != null ? "with-image" : String.Empty;

    var query = HttpUtility.ParseQueryString(Request.Url.Query);
    JobSearchQuery.JobsSortOrder sort = JobSearchQuery.JobsSortOrder.None;
    Enum.TryParse(query["sort"], true, out sort);

    var queryWithoutSort = HttpUtility.ParseQueryString(Request.Url.Query);
    queryWithoutSort["sort"] = String.Empty;
    var urlWithoutSort = Request.Url.AbsolutePath + "?" + queryWithoutSort;

    var queryWithoutPage = HttpUtility.ParseQueryString(Request.Url.Query);
    queryWithoutPage["page"] = String.Empty;
    var urlWithoutPage = Request.Url.AbsolutePath + "?" + queryWithoutPage;
}
@section Breadcrumb {}
<div class="jobs-header @headerClass">
    <div class="text-content">
        @if (Model.JobsLogo != null)
        {
            <h1>
                @if (Model.JobsHomePage != null)
                {
                    <a href="@Model.JobsHomePage.Url"><img src="@Model.JobsLogo.ImageUrl" alt="@Model.Metadata.Title" width="@Model.JobsLogo.Width" /></a>
                }
                else
                {
                    <img src="@Model.JobsLogo.ImageUrl" alt="@Model.Metadata.Title" width="@Model.JobsLogo.Width" />
                }
            </h1>
        }
        @if (Model.LoginPage != null)
        {
            <p class="login"><a href="@Model.LoginPage.Url">@Model.LoginPage.Text</a></p>
        }
    </div>
</div>
<div class="jobs-content full-page">
    <div class="content text-content">

        <table>
            <thead>
                <tr>
                    <th><a href="@urlWithoutSort@(sort == JobSearchQuery.JobsSortOrder.JobTitleAscending ? "jobtitledescending" : "jobtitleascending")">Job title</a></th>
                    <th>Organisation</th>
                    <th><a href="@urlWithoutSort@(sort == JobSearchQuery.JobsSortOrder.LocationAscending ? "locationdescending" : "locationascending")">Location</a></th>
                    <th>Salary range</th>
                    <th><a href="@urlWithoutSort@(sort == JobSearchQuery.JobsSortOrder.ClosingDateAscending ? "closingdatedescending" : "closingdateascending")">Closing date</a></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var job in Model.Jobs)
            {
                    <tr>
                        @if (Model.JobDetailPage != null)
                        {
                            <td><a href="@Model.JobDetailPage.Url?nPostingTargetID=@job.Id">@job.JobTitle</a></td>
                        }
                        else
                        {
                            <td>@job.JobTitle</td>
                        }
                        <td>@job.Organisation</td>
                        <td>@job.Location</td>
                        <td>@job.Salary</td>
                        <td>@job.ClosingDate.ToBritishDate()</td>
                    </tr>
                }
            </tbody>
        </table>
        @{
            var htmlToRewrite = Html.PagedListPager(Model.Jobs, page => urlWithoutPage + page, new PagedListRenderOptions() { DisplayLinkToFirstPage = PagedListDisplayMode.Never, DisplayLinkToLastPage = PagedListDisplayMode.Never, LinkToPreviousPageFormat = "&lt; Prev", LinkToNextPageFormat = "Next &gt;", DisplayItemSliceAndTotal = true, ItemSliceAndTotalFormat = "{0}–{1} of {2} items", MaximumPageNumbersToDisplay = 5, ContainerDivClasses = new[] { "infoBar" }, UlElementClasses = new[] { "pagingPages" } });
            @Html.Raw(Regex.Replace(htmlToRewrite.ToHtmlString(), "<ul class=\"pagingPages\">(.*)<li class=\"disabled PagedList-pageCountAndLocation\"><a>(.*?)</a></li>", "<div class=\"pagingResultsInContext\">$2</div><ul class=\"pagination\">$1"))
        }

        @if (Model.JobAlertsPage != null)
        {
            <h2>Alert me about jobs like these</h2>
            <form method="GET" action="@(Model.JobAlertsPage.Url)" class="job-alerts">
                <input type="hidden" name="keywords" value="@query["keywords"]" />
                <input type="hidden" name="LOV39" value="@query["location"]" />
                <input type="hidden" name="LOV40" value="@query["type"]" />
                <input type="hidden" name="LOV52" value="@query["org"]" />
                <input type="hidden" name="LOV50" value="@query["hours"]" />
                <input type="hidden" name="LOV46" value="@query["salary"]" />
                <input type="hidden" name="jobnum" value="@query["ref"]" />
                <input type="hidden" name="sagsubmit" value="Save" />
                <input type="hidden" name="backpage" value="1" />
                <input type="hidden" name="Create" value="1" />
                <fieldset>
                    <legend>How often?</legend>
                    <label><input type="checkbox" name="vDeliveryFrequency" value="1" /> Once a day</label>
                    <label><input type="checkbox" name="vDeliveryFrequency" value="7" /> Once a week</label>
                </fieldset>
                <fieldset>
                    <legend>For how long?</legend>
                    <label><input type="checkbox" name="dExpirationDate" value="15" /> Two weeks</label>
                    <label><input type="checkbox" name="dExpirationDate" value="30" /> A month</label>
                    <label><input type="checkbox" name="dExpirationDate" value="90" /> Three months</label>
                    <label><input type="checkbox" name="dExpirationDate" value="180" /> Six months</label>
                </fieldset>
                <div>
                    <label for="semail">Your email address</label>
                    <input type="email" name="semail" id="semail" />
                    <input type="submit" value="Get job alert" />
                </div>
            </form>
        }
        </div>
    </div>
