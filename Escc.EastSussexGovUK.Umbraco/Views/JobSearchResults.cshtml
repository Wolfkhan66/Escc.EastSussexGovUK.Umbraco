@using System.Text.RegularExpressions
@using ClientDependency.Core.Mvc
@using Escc.ClientDependencyFramework
@using Escc.Dates
@using Escc.EastSussexGovUK.Skins
@using Escc.EastSussexGovUK.Umbraco.Jobs
@using Escc.EastSussexGovUK.Views
@using Escc.Web
@using X.PagedList.Mvc
@inherits Umbraco.Web.Mvc.UmbracoViewPage<Escc.EastSussexGovUK.Umbraco.Jobs.JobSearchResultsViewModel>
@{
    Model.EsccWebsiteView = ViewSelector.CurrentViewIs(Layout, ViewEngine.Mvc);
    Model.EsccWebsiteSkin = new CustomerFocusSkin(Model.EsccWebsiteView);
    Html.RequiresCss("~/css/jobs/jobs-small.css");
    Html.RequiresCss("~/css/jobs/jobs-medium.css", MediaQueryAlias.Resolve("Medium"));
    Html.RequiresCss("~/css/jobs/jobs-large.css", MediaQueryAlias.Resolve("Large"));
    Html.RequiresCss(Request.Url.AbsolutePath + "?alttemplate=JobSearchResultsCss&media-query=small", 101);
    Html.RequiresJs("~/js/jobs/job-search-results.js");
    new ContentSecurityPolicyHeaders(Response.Headers).AppendPolicy(new ContentSecurityPolicyFromConfig().Policies["TalentLink"]).UpdateHeaders();

    var headerClass = Model.HeaderBackgroundImage != null ? "with-image" : String.Empty;

    var query = HttpUtility.ParseQueryString(Request.Url.Query);
    JobSearchQuery.JobsSortOrder sort = JobSearchQuery.JobsSortOrder.None;
    Enum.TryParse(query["sort"], true, out sort);

    var queryWithoutSort = HttpUtility.ParseQueryString(Request.Url.Query);
    queryWithoutSort["sort"] = String.Empty;
    var urlWithoutSort = Request.Url.AbsolutePath + "?" + queryWithoutSort;

    var queryWithoutPage = HttpUtility.ParseQueryString(Request.Url.Query);
    queryWithoutPage["page"] = String.Empty;
    var urlWithoutPage = Request.Url.AbsolutePath + "?" + queryWithoutPage;
}
@section Breadcrumb {}
<div class="jobs-header @headerClass" data-jobs-id="@(Model.ResultsUrl?.Id)" data-jobs-mask="@(Model.ResultsUrl?.Mask)" data-alerts-url="@(Model.JobAlertsPage?.Url)">
    <div class="text-content">
        @if (Model.JobsLogo != null)
        {
            <h1>
                @if (Model.JobsHomePage != null)
                {
                    <a href="@Model.JobsHomePage.Url"><img src="@Model.JobsLogo.ImageUrl" alt="@Model.Metadata.Title" width="@Model.JobsLogo.Width" /></a>
                }
                else
                {
                    <img src="@Model.JobsLogo.ImageUrl" alt="@Model.Metadata.Title" width="@Model.JobsLogo.Width" />
                }
            </h1>
        }
        @if (Model.LoginPage != null)
        {
            <p class="login"><a href="@Model.LoginPage.Url">@Model.LoginPage.Text</a></p>
        }
        <form action="@Request.Url.AbsolutePath" method="GET" class="jobs-search">
            <div>
                <input type="search" name="keywords" value="@(Request.QueryString["keywords"]?.TrimEnd(new char[] {','}))"/>
                <input type="submit" value="Search"/>
            </div>
            <div class="job-filters"></div>

            <div class="job-alerts">
                Choose your job alert frequency:
                <input type="radio" name="vDeliveryFrequency" value="1" id="vDeliveryFrequency1"><label for="vDeliveryFrequency1">Once a day</label>
                <input type="radio" name="vDeliveryFrequency" value="7" id="vDeliveryFrequency7" checked="checked"><label for="vDeliveryFrequency7">Once a week</label>

                Choose when your job alerts end:
                <input type="radio" name="dExpirationDate" value="15" id="dExpirationDate15"><label for="dExpirationDate15">2 weeks</label>
                <input type="radio" name="dExpirationDate" value="30" id="dExpirationDate30" checked="checked"><label for="dExpirationDate30">1 month</label>
                <input type="radio" name="dExpirationDate" value="90" id="dExpirationDate90"><label for="dExpirationDate90">3 months</label>
                <input type="radio" name="dExpirationDate" value="180" id="dExpirationDate180"><label for="dExpirationDate180">6 months</label>

                <input type="email" name="semail" />
                <input type="submit" value="Get alerts" />
            </div>
        </form>
    </div>
</div>
<div class="jobs-content full-page">
    <div class="content text-content">

        <table>
            <thead>
                <tr>
                    <th><a href="@urlWithoutSort@(sort == JobSearchQuery.JobsSortOrder.JobTitleAscending ? "jobtitledescending" : "jobtitleascending")">Job title</a></th>
                    <th>Organisation</th>
                    <th><a href="@urlWithoutSort@(sort == JobSearchQuery.JobsSortOrder.LocationAscending ? "locationdescending" : "locationascending")">Location</a></th>
                    <th>Salary range</th>
                    <th><a href="@urlWithoutSort@(sort == JobSearchQuery.JobsSortOrder.ClosingDateAscending ? "closingdatedescending" : "closingdateascending")">Closing date</a></th>
                </tr>
            </thead>
            <tbody>
            @foreach (var job in Model.Jobs)
            {
                <tr>
                    @if (Model.JobDetailPage != null)
                    {
                        <td><a href="@Model.JobDetailPage.Url?nPostingTargetID=@job.Id">@job.JobTitle</a></td>
                    }
                    else
                    {
                        <td>@job.JobTitle</td>
                    }
                    <td>@job.Organisation</td>
                    <td>@job.Location</td>
                    <td>@job.Salary</td>
                    <td>@job.ClosingDate.ToBritishDate()</td>
                </tr>
            }
            </tbody>
        </table>
        @{
            var htmlToRewrite = Html.PagedListPager(Model.Jobs, page => urlWithoutPage + page, new PagedListRenderOptions() {DisplayLinkToFirstPage = PagedListDisplayMode.Never, DisplayLinkToLastPage = PagedListDisplayMode.Never, LinkToPreviousPageFormat = "&lt; Prev", LinkToNextPageFormat = "Next &gt;", DisplayItemSliceAndTotal = true, ItemSliceAndTotalFormat = "{0}–{1} of {2} items", MaximumPageNumbersToDisplay = 5, ContainerDivClasses = new[] { "infoBar"}, UlElementClasses = new[] { "pagingPages" } });
            @Html.Raw(Regex.Replace(htmlToRewrite.ToHtmlString(), "<ul class=\"pagingPages\">(.*)<li class=\"disabled PagedList-pageCountAndLocation\"><a>(.*?)</a></li>", "<div class=\"pagingResultsInContext\">$2</div><ul class=\"pagination\">$1"))
        }
    </div>
</div>


